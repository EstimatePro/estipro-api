name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development
  workflow_dispatch:

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.IMAGE_NAME }}:${{ vars.IMAGE_TAG }}

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'PRODUCTION' || 'DEVELOPMENT' }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ vars.DOTNET_VERSION }}

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Run Tests
        run: dotnet test --no-build --verbosity normal

  publish:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: build_and_test
    if: ${{ success() }}
    environment: ${{ github.ref == 'refs/heads/main' && 'PRODUCTION' || 'DEVELOPMENT' }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: src/EstiPro.Api/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.DOCKER_IMAGE }}

  deploy:
    name: Deploy to Swarm
    runs-on: ubuntu-latest
    needs: publish
    if: ${{ success() }}
    environment: ${{ github.ref == 'refs/heads/main' && 'PRODUCTION' || 'DEVELOPMENT' }}

    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
#          debug: true
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull '${{ env.DOCKER_IMAGE }}'
            docker service update --force --image ${{ env.DOCKER_IMAGE }} ${{ vars.CONTAINER_NAME }}
            docker system prune -af --volumes
